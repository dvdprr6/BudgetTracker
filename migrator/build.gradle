plugins {
  id 'java'
  id 'scala'
  id 'com.github.johnrengelman.shadow'
}

group = 'com.migrator'


repositories {
  mavenCentral()
}

sourceSets {
  main {
    scala {
      srcDirs = ['src/main/scala']
    }
  }
  test {
    scala {
      srcDirs = ['src/test/scala']
    }
  }
}

test {
  useJUnitPlatform()
}


dependencies {
  implementation group: 'org.scala-lang', name: 'scala-library', version: scalaLibraryVersion

  implementation group: 'dev.zio', name: 'zio_2.13', version: zioVersion
  implementation group: 'dev.zio', name: 'zio-cli_2.13', version: zioCliVersion
  implementation group: 'dev.zio', name: 'zio-mock_2.13', version: '1.0.0-RC12'

  implementation group: 'org.scalikejdbc', name: 'scalikejdbc_2.13', version: scalaLikeJdbcVersion
  implementation group: 'org.postgresql', name: 'postgresql', version: postgresVersion
  implementation group: 'org.mongodb', name: 'mongodb-driver-sync', version: '5.0.1'

  testImplementation platform('org.junit:junit-bom:5.9.1')
  testImplementation 'org.junit.jupiter:junit-jupiter'
  testImplementation group: 'dev.zio', name: 'zio-test_2.13', version: '2.0.20'
  testImplementation group: 'dev.zio', name: 'zio-test-junit_2.13', version: '2.0.20'

}

jar {
  manifest {
    attributes 'Main-Class': 'com.migrator.Main'
  }
}

shadowJar {
  archiveBaseName.set('migrator')
  archiveClassifier.set('')
  archiveVersion.set('')
}


task dist(dependsOn: shadowJar, type: Copy){
  from 'build/libs'
  into "/home/david/dist/proj/BudgetTracker/migrator-${getDate()}-${incrementBuild()}/lib"
  include '*.jar'
}

def getDate(){
  return new Date().format('yyyy-MM-dd')
}

def incrementBuild(){
  var currentDate = getDate()
  String proj = 'migrator'
  List<String> directoryInfo = []
  fileTree('/home/david/dist/proj/BudgetTracker/').visit { FileVisitDetails fvd ->
    if(fvd.directory && fvd.name.contains(currentDate) && fvd.name.contains("migrator")) {
      directoryInfo << fvd.file.name
    }
  }

  var currentDateBuilds = directoryInfo.each {
    if(it.contains(proj) && it.contains(currentDate)){
      return it
    }
  }

  var sortCurrentBuilds = currentDateBuilds.sort {a, b ->
    var aLength = a.length()
    var aLastIndex = a.lastIndexOf("-")
    var bLength = b.length()
    var bLastIndex = b.lastIndexOf("-")

    var aSubString = a.substring(aLastIndex + 1, aLength)
    var bSubString = b.substring(bLastIndex + 1, bLength)

    var aInteger = aSubString.toInteger()
    var bInteger = bSubString.toInteger()

    aInteger <=> bInteger
  }

  if(!sortCurrentBuilds.isEmpty()){
    var previousBuild = sortCurrentBuilds.last()

    var previousBuildLength = previousBuild.length()
    var previousBuildLastIndex = previousBuild.lastIndexOf("-")

    var buildInteger = previousBuild.substring(previousBuildLastIndex + 1, previousBuildLength).toInteger()

    return buildInteger + 1
  }else{
    return 1
  }
}